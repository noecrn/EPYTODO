{
	"info": {
		"_postman_id": "50044ac5-ff8f-4c45-aae8-80cdeb11e6b5",
		"name": "TestEPYTODO",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34819504"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"userId\", jsonData.id);",
									"pm.globals.set(\"token\", jsonData.token);",
									"",
									"console.log(pm.globals.get(\"token\"));",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response schema should have properties 'id' and 'token'\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Token should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"name\": \"Test User\",\n    \"firstname\": \"Test\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/register",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"register"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Account already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 409 for registration endpoint\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"name\": \"Test User\",\n    \"firstname\": \"Test\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/register",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Connect a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"userId\", jsonData.id);",
									"pm.globals.set(\"token\", jsonData.token);",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response schema should have properties 'id' and 'token'\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Token should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/login",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 401 for registration endpoint\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/login",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid body input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 401 for registration endpoint\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"wrongpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/login",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "View all user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Updated response time test to 500ms",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"email\", jsonData.email);",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response schema should have properties 'id' and 'token'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('password');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('firstname');",
									"    pm.expect(responseData).to.have.property('name');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3306/user",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "View all user tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Each todo object should have the required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(todo => {",
									"        pm.expect(todo).to.be.an('object');",
									"        pm.expect(todo).to.have.property('id');",
									"        pm.expect(todo).to.have.property('title');",
									"        pm.expect(todo).to.have.property('description');",
									"        pm.expect(todo).to.have.property('created_at');",
									"        pm.expect(todo).to.have.property('due_time');",
									"        pm.expect(todo).to.have.property('status');",
									"        pm.expect(todo).to.have.property('user_id');",
									"    });",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:3306/todos/${pm.globals.get(\"todoId\")}`,",
									"    method: 'DELETE',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.globals.set(\"todoId\", res.json().id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: 'http://localhost:3306/user/todos',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    }",
									"}, function (err, res) {",
									"    pm.test(\"Response status code is 404\", function () {",
									"        pm.expect(res.code).to.equal(404);",
									"    });",
									"",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(res.responseTime).to.be.below(200);",
									"    });",
									"",
									"    pm.test(\"Msg is a non-empty string\", function () {",
									"        const responseData = res.json();",
									"        ",
									"        pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Msg should not be empty\");",
									"    });",
									"",
									"    pm.test(\"Content-Type is application/json\", function () {",
									"        pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"});",
									"pm.sendRequest({",
									"    url: 'http://localhost:3306/todos',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"title\": \"test todo\",",
									"            \"description\": \"this is a test\",",
									"            \"due_time\": \"2021-03-06 19:24:00\",",
									"            \"user_id\": `${pm.globals.get(\"userId\")}`,",
									"            \"status\": \"todo\"",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.globals.set(\"todoId\", res.json().id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3306/user/todos",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"user",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "View user information :id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Each user object should have the required properties\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('email');",
									"  pm.expect(responseData).to.have.property('password');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('firstname');",
									"  pm.expect(responseData).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"Can't see other user's informations\", function () {",
									"    pm.sendRequest({",
									"        url: 'http://localhost:3306/users/1',",
									"        header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"        },",
									"    }, function (err, response) {",
									"        pm.expect(response).to.have.status(403);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: 'http://localhost:3306/register',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"email\": \"value\",",
									"            \"name\": \"value\",",
									"            \"firstname\": \"value\",",
									"            \"password\": \"value\"",
									"        })",
									"    }",
									"}, function (err, res) {});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3306/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View user information :email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Each user object should have the required properties\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('email');",
									"  pm.expect(responseData).to.have.property('password');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('firstname');",
									"  pm.expect(responseData).to.have.property('created_at');",
									"});",
									"",
									"pm.test(\"Can't see other user's informations\", function () {",
									"    pm.sendRequest({",
									"        url: 'http://localhost:3306/users/value',",
									"        header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"        },",
									"    }, function (err, response) {",
									"        pm.expect(response).to.have.status(403);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: 'http://localhost:3306/register',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"email\": \"value\",",
									"            \"name\": \"value\",",
									"            \"firstname\": \"value\",",
									"            \"password\": \"value\"",
									"        })",
									"    }",
									"}, function (err, res) {});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3306/users/{{email}}",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"users",
								"{{email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.within(0, 500);",
									"});",
									"",
									"pm.test(\"Verify if update worked by comparing expected and actual data\", function () {",
									"    var expectedData = JSON.parse(pm.request.body.raw);",
									"    var actualData = pm.response.json();",
									"    ",
									"    pm.expect(actualData.email).to.eql(expectedData.email);",
									"    pm.expect(actualData.name).to.eql(expectedData.name);",
									"    pm.expect(actualData.firstname).to.eql(expectedData.firstname);",
									"});",
									"",
									"pm.test(\"Can't see other user's informations\", function () {",
									"    pm.sendRequest({",
									"        url: 'http://localhost:3306/users/1',",
									"        header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"        },",
									"    }, function (err, response) {",
									"        pm.expect(response).to.have.status(403);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: 'http://localhost:3306/register',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.globals.get(\"token\")}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"email\": \"value\",",
									"            \"name\": \"value\",",
									"            \"firstname\": \"value\",",
									"            \"password\": \"value\"",
									"        })",
									"    }",
									"}, function (err, res) {});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"updated@example.com\",\n    \"name\": \"updated User\",\n    \"firstname\": \"updated\",\n    \"password\": \"updatedPassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3306/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.within(0, 500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3306/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3306",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}